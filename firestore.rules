rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function getRole() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : 'viewer';
    }

    function isAdmin() {
      return isSignedIn() && (getRole() == 'admin' || getRole() == 'super_admin');
    }

    function isSuperAdmin() {
      return isSignedIn() && getRole() == 'super_admin';
    }

    function isContributor() {
      return isSignedIn() && (
        getRole() == 'contributor' ||
        getRole() == 'admin' ||
        getRole() == 'super_admin'
      );
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && (
        // Allow users to create their own document with contributor or viewer role
        (isUser(userId) && (request.resource.data.role == 'contributor' || request.resource.data.role == 'viewer')) ||
        // Or admin can create with any role except super_admin
        (isAdmin() && (request.resource.data.role == 'contributor' || request.resource.data.role != 'super_admin')) ||
        // Or super_admin can create with any role
        isSuperAdmin()
      );
      allow update: if isSignedIn() && (
        // Users can update their own non-role fields
        (isUser(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
        // Admin can update roles except super_admin
        (isAdmin() && resource.data.role != 'super_admin' && request.resource.data.role != 'super_admin') ||
        // Only super_admin can change any roles
        isSuperAdmin()
      );
      allow delete: if isSignedIn() && (isUser(userId) || isSuperAdmin());
    }

    // Contributor requests collection
    match /contributorRequests/{requestId} {
      allow read: if isSignedIn() && (
        // Users can read their own requests
        (exists(resource.data) && request.auth.uid == resource.data.userId) ||
        // Admins can read all requests
        isAdmin()
      );
      allow create: if isSignedIn() && (
        // Users can create requests for themselves
        request.auth.uid == request.resource.data.userId &&
        // Only viewers can request contributor status
        getRole() == 'viewer' &&
        // Request must have required fields
        request.resource.data.keys().hasAll(['userId', 'userEmail', 'status', 'createdAt'])
      );
      allow delete: if isSignedIn() && (
        // Users can delete their own requests
        (exists(resource.data) && request.auth.uid == resource.data.userId) ||
        // Admins can delete any request
        isAdmin()
      );
    }

    // UserSettings collection
    match /userSettings/{userId} {
      allow read: if isSignedIn() && isUser(userId);
      allow write: if isSignedIn() && isUser(userId);
    }

    // Receipts collection
    match /receipts/{receiptId} {
      allow read, write: if true;  // For testing, allow all access
    }

    // Existing rules for other collections...
    match /products/{productId} {
      allow read: if isSignedIn();
      allow create: if isContributor();
      allow update: if isContributor();
      allow delete: if isAdmin();
    }
    
    match /companies/{companyId} {
      allow read: if isSignedIn();
      allow create: if isContributor();
      allow update: if isContributor();
      allow delete: if isAdmin();
    }
  }
}