rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    function getRole() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : 'viewer';
    }

    function isAdmin() {
      return isSignedIn() && (getRole() == 'admin' || getRole() == 'super_admin');
    }

    function isSuperAdmin() {
      return isSignedIn() && getRole() == 'super_admin';
    }

    function isContributor() {
      return isSignedIn() && (
        getRole() == 'contributor' ||
        getRole() == 'admin' ||
        getRole() == 'super_admin'
      );
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    // Shared Lists collection
    match /sharedLists/{listId} {
      // Allow any authenticated user to query the collection
      allow list: if isSignedIn();
      
      // Allow read if the user is the owner or the list is shared with them
      allow get: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid || 
        resource.data.sharedWith.hasAny([request.auth.email, request.auth.email.lower()])
      );
      
      // Allow create if the user is authenticated and setting themselves as owner
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      
      // Allow update for several cases (with detailed permissions)
      allow update: if isSignedIn() && (
        // Case 1: Owner can do any updates
        resource.data.ownerId == request.auth.uid ||
        
        // Case 2: If you're in the sharedWith list, you can update the list content
        (resource.data.sharedWith.hasAny([request.auth.email, request.auth.email.lower()]) &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['sharedWith']))
      );
      
      // Allow delete only for the owner
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && (
        (isUser(userId) && ['contributor', 'viewer'].includes(request.resource.data.role)) ||
        (isAdmin() && ['viewer', 'contributor', 'admin'].includes(request.resource.data.role)) ||
        isSuperAdmin()
      ) || (request.auth != null && request.auth.uid == userId);
      allow update: if isSignedIn() && (
        (isUser(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
        (isAdmin() && resource.data.role != 'super_admin' && request.resource.data.role != 'super_admin') ||
        isSuperAdmin()
      );
      allow delete: if isAdmin() || isUser(userId);
    }

    // User Settings collection
    match /userSettings/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isUser(userId);
    }

    // User Stats collection
    match /user_stats/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && (isUser(userId) || isAdmin());
    }

    // Contributor Requests collection
    match /contributorRequests/{requestId} {
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
      allow create: if isSignedIn() && (
        request.auth.uid == request.resource.data.userId &&
        getRole() == 'viewer' &&
        request.resource.data.keys().hasAll(['userId', 'userEmail', 'status', 'createdAt'])
      );
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }

    // Receipts collection
    match /receipts/{receiptId} {
      allow read, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Products collection
    match /products/{productId} {
      allow read: if isSignedIn();
      allow create: if isContributor();
      allow update: if isContributor();
      allow delete: if isSignedIn() && (
        isAdmin() || resource.data.created_by == request.auth.uid
      );
    }

    // Companies collection
    match /companies/{companyId} {
      allow read: if isSignedIn();
      allow create: if isContributor();
      allow update: if isContributor();
      allow delete: if isAdmin();
    }

    // Canadian Products collection
    match /canadian_products/{productId} {
      allow read: if resource.data.isPubliclyVisible == true || isSignedIn();
      allow create, delete: if isSignedIn();
      allow update: if isSignedIn() && (
        resource.data.created_by == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeStats'])
      );
    }

    // Brand Likes collection
    match /brandLikes/{likeId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null;
    }

    // Brand Like Stats collection
    match /brandLikeStats/{brandId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Public Stats collection
    match /public_stats/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Email Sequences collection
    match /email_sequences/{sequenceId} {
      allow read, write: if isAdmin();
    }
    
    // Email Logs collection
    match /email_logs/{logId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow create: if isSignedIn(); 
      allow update, delete: if isAdmin();
    }
  
    match /product_submissions/{submissionId} {
    // Anyone authenticated can create submissions
    allow create: if isSignedIn() && request.resource.data.submittedBy == request.auth.uid;

    // Submitters can view their own submissions
    allow read: if isSignedIn() && (
      resource.data.submittedBy == request.auth.uid || isAdmin()
    );

    // Only admins can update submissions (for approval process)
    allow update: if isAdmin();

    // Only admins can delete submissions
    allow delete: if isAdmin();
  }

    // Updates collection (move it inside)
    match /updates/{updateId} {
      allow read: if true;  // Anyone can read updates
      allow create: if isContributor();  // Contributors, admins, and super_admins can create
      allow update: if isContributor();  // Same group can update
      allow delete: if isAdmin();  // Only admins and super_admins can delete
    }
  }
}
