rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && (
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin')
      );
    }

    function isSuperAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }

    function isContributor() {
      return isSignedIn() && (
        isAdmin() ||
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'contributor' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin')
      );
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isUser(userId);
      allow update: if isSignedIn() && (
        // Users can update their own non-role fields
        (isUser(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role'])) ||
        // Only super_admin can change roles
        isSuperAdmin()
      );
      // Allow users to delete their own documents, or super_admin to delete any
      allow delete: if isSignedIn() && (isUser(userId) || isSuperAdmin());
    }

    // Existing rules for other collections
    match /admins/{userId} {
      allow read: if isSignedIn();
      allow write: if isSuperAdmin();
    }

    // Products collection
    match /products/{productId} {
      allow read: if isSignedIn();
      allow create: if isContributor();
      allow update: if (
        isSignedIn() && (
          isContributor() ||
          request.auth.uid in resource.data.prices[request.resource.data.prices.size() - 1].created_by
        )
      );
      allow delete: if isAdmin();
    }
    
    match /approval_history/{historyId} {
      allow read: if isSignedIn();
      allow create: if isContributor();
      allow update: if isContributor();
    }
    
    match /prices/{priceId} {
      allow read: if isSignedIn();
      allow create: if isContributor() 
        && request.resource.data.keys().hasAll(['product_id', 'location', 'price', 'user_id', 'timestamp'])
        && request.resource.data.user_id == request.auth.uid
        && request.resource.data.price >= 0;
      allow update: if isContributor();
      allow delete: if isAdmin();
    }
    
    match /companies/{companyId} {
      allow read: if isSignedIn();
      allow create: if isContributor();
      allow update: if isContributor();
      allow delete: if isAdmin();
    }
    
    match /userSettings/{userId} {
      allow read: if isSignedIn() && isUser(userId);
      allow write: if isSignedIn() && isUser(userId);
    }
  }
}